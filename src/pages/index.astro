---
interface Theme {
  slug: string;
  data: {
    author: string;
    icon: string;
    tags: string[];
		url: string;
  };
}
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const themes: Theme[] = await getCollection('themes');
---
<Layout title="Ports" desc="Gruvbox is a colorscheme createad by morhetz for vim and ported to other applications">
  <nav class="mt-3">
    <ul>
      <li>
				<a style="color: #98971A;" href="/gruvbox/">Ports</a>
        <div id="indicator" transition:name="navigator"/>
      </li>
			<li><a href="/gruvbox/contributing">Contribute</a></li>
			<li><a href="/gruvbox/wallpaper">Wallpapers</a></li>
    </ul>
  </nav>
	<h1 class="firamono-medium text-center text-5xl mt-5 mb-10">Gruvbox Ports</h1>
	<label>Port name</label>
	<input type="text" id="search" placeholder="vim, neovim, ...">
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5" id="themes-container">
    {
      themes.map(theme => {
        const { slug, data } = theme;
        const { author, icon, tags, url } = data;

        return (
          <a id={`card-${slug}`} data-slug={slug} href={url} target="_blank" class="rounded-md px-4 py-2 card relative">
            <div class="flex justify-between">
              <p class="text-2xl"><b>{slug}</b></p>
							<img 
								src={icon} 
								alt=`${slug} icon`
								style="filter: invert(85%) sepia(70%)"
								height="40"
								width="40"
							/>
            </div>
            <div class="grid xl:grid-cols-3 grid-cols-2 md:grid-cols-2 grid-rows-1 gap-3 mt-5 mb-7">
              {tags.map((t) => <p class="tag">{t}</p>)}
            </div>
						<p class="absolute bottom-1" style="color: #D5C4A1;">{author}</p>
          </a>
        )
      })
    }
  </div>
</Layout>

<script>
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const themesContainer = document.getElementById('themes-container') as HTMLElement;
  const themeCards = themesContainer.querySelectorAll('a[data-slug]');

  searchInput.addEventListener('input', () => {
    const searchTerm = searchInput.value.toLowerCase();

    themeCards.forEach(card => {
      const slug = card.dataset.slug?.toLowerCase() || '';
			if (slug.includes(searchTerm)) { card.style.display = 'block'; }
			else { card.style.display = 'none';}
    });
  });
</script>

<style>
	#search {
		padding: 4px 8px;
		margin: .4rem; 
		outline: none;
		border: none;
		background-color: #282828;
		border-radius: .4rem;
		color: #BDAE93
	}
	#search:focus {
		color: #FBF1C7;
	}
	.card {
		background: #282828;
	}
	.tag {
		font-size: .8rem;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 4px 3px;
		background: #504945;
		color: #FBF1C7;
		border-radius: 99999px;
	}
</style>
